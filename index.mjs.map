{"version":3,"file":"index.mjs","sources":["../lib/smeanors.js","../lib/ndarray.js","../lib/main.js"],"sourcesContent":["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport ssumors from '@stdlib/blas-ext-base-ssumors' ;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n*\n* var x = new Float32Array( [ 1.0, -2.0, 2.0 ] );\n* var N = x.length;\n*\n* var v = smeanors( N, x, 1 );\n* // returns ~0.3333\n*/\nfunction smeanors( N, x, stride ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ 0 ];\n\t}\n\treturn float64ToFloat32( ssumors( N, x, stride ) / N );\n}\n\n\n// EXPORTS //\n\nexport default smeanors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport float64ToFloat32 from '@stdlib/number-float64-base-to-float32' ;\nimport { ndarray as ssumors } from '@stdlib/blas-ext-base-ssumors' ;\n\n\n// MAIN //\n\n/**\n* Computes the arithmetic mean of a single-precision floating-point strided array using ordinary recursive summation.\n*\n* @param {PositiveInteger} N - number of indexed elements\n* @param {Float32Array} x - input array\n* @param {integer} stride - stride length\n* @param {NonNegativeInteger} offset - starting index\n* @returns {number} arithmetic mean\n*\n* @example\n* import Float32Array from '@stdlib/array-float32' ;\n* import floor from '@stdlib/math-base-special-floor' ;\n*\n* var x = new Float32Array( [ 2.0, 1.0, 2.0, -2.0, -2.0, 2.0, 3.0, 4.0 ] );\n* var N = floor( x.length / 2 );\n*\n* var v = smeanors( N, x, 2, 1 );\n* // returns 1.25\n*/\nfunction smeanors( N, x, stride, offset ) {\n\tif ( N <= 0 ) {\n\t\treturn NaN;\n\t}\n\tif ( N === 1 || stride === 0 ) {\n\t\treturn x[ offset ];\n\t}\n\treturn float64ToFloat32( ssumors( N, x, stride, offset ) / N );\n}\n\n\n// EXPORTS //\n\nexport default smeanors;\n","/**\n* @license Apache-2.0\n*\n* Copyright (c) 2020 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n// MODULES //\n\nimport setReadOnly from '@stdlib/utils-define-nonenumerable-read-only-property' ;\nimport smeanors from './smeanors.js' ;\nimport ndarray from './ndarray.js' ;\n\n\n// MAIN //\n\nsetReadOnly( smeanors, 'ndarray', ndarray );\n\n\n// EXPORTS //\n\nexport default smeanors;\n"],"names":["smeanors","N","x","stride","NaN","float64ToFloat32","ssumors","offset","setReadOnly","ndarray"],"mappings":";;wUA6CA,SAASA,EAAUC,EAAGC,EAAGC,GACxB,OAAKF,GAAK,EACFG,IAEG,IAANH,GAAsB,IAAXE,EACRD,EAAG,GAEJG,EAAkBC,EAASL,EAAGC,EAAGC,GAAWF,EACpD,CCNA,SAASD,EAAUC,EAAGC,EAAGC,EAAQI,GAChC,OAAKN,GAAK,EACFG,IAEG,IAANH,GAAsB,IAAXE,EACRD,EAAGK,GAEJF,EAAkBC,EAASL,EAAGC,EAAGC,EAAQI,GAAWN,EAC5D,CC1BAO,EAAAR,EAAA,UAAAS"}